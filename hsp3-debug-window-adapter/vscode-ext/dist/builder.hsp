; Builder.
; See builder.md for details.
; LICENSE: CC0-1.0 <https://creativecommons.org/publicdomain/zero/1.0/deed.ja>

#include "hspcmp.as"

#runtime "hsp3cl"
#packopt name "builder"
#packopt orgpath 1

#define global APP_NAME "builder"
#define global APP_VERSION "1.1.0"

; ------------------------------------------------
; Command line parser
; ------------------------------------------------

#module m_cmdline_parser

#define true 1
#define false 0

; Parse a command line string.
#deffunc cmdline_parser_parse str cmdline, array args, \
	local argc

	s_cmdline = cmdline
	s_cmdline_len = strlen(s_cmdline)
	s_index = 0

	argc = 0

	repeat
		args(argc) = ""
		cmdline_parser_next args(argc)
		if stat == false {
			break
		}

		argc++
	loop
	return argc

; Parse next argument.
#deffunc cmdline_parser_next var value, \
	local ok, local c, local start, local in_quote

	; Skip spaces.
	repeat
		if s_index >= s_cmdline_len {
			break
		}

		c = peek(s_cmdline, s_index)
		if c != ' ' {
			break
		}

		s_index++
	loop

	ok = false
	value = ""
	in_quote = false
	start = s_index

	repeat
		if s_index >= s_cmdline_len {
			gosub *l_commit
			break
		}

		c = peek(s_cmdline, s_index)
		if c == ' ' && in_quote == false {
			gosub *l_commit
			break
		}

		if c == '"' {
			gosub *l_commit
			s_index++
			start = s_index
			in_quote = in_quote == false
			ok = true
			continue
		}

		s_index++
	loop
	return ok || peek(value) != 0

*l_commit

	value += strmid(s_cmdline, start, s_index - start)
	return

#global

; ------------------------------------------------
; Application
; ------------------------------------------------

#module m_app

#include "hspcmp.as"

#define true 1
#define false 0

#deffunc app_main

	s_exit_code = 1 ; Failure
	s_show_help = false
	s_show_version = false

	s_ref_name = ""
	s_ref_name_exists = false

	s_obj_name = "start.ax"

	s_runtime_name = ""

	s_compile_opts = 1 | 4 ; 1: debug info, 4: generate object files including utf-8 (utf-8 output)
	s_pp_opt = 4 | 32 ; 4: make packfile, 32: assume scripts are utf-8 (utf-8 input)
	s_debug_mode = true

	sdim s_subcommand
	s_subcommand_exists = false

	sdim s_src_name
	s_src_name_exists = false

	s_work_dir = dir_cur
	s_hsp3_root = dir_exe

	sdim s_error, 0x10000

	onexit goto *l_on_exit

	app_parse_cmdline
	if stat == false {
		app_fail
	}

	app_build
	if stat == false {
		app_fail
	}
	end s_exit_code

#deffunc app_parse_cmdline \
	local ok, local reason, \
	local args, local argc, local i, local flag

	cmdline_parser_parse dir_cmdline, args
	argc = stat

	ok = true
	i = 0

	repeat
		if i >= argc {
			break
		}

		flag = args(i)
		i++

		; exe itself (when an obj file passed in to the runtime)
		if i == 1 && instr(flag, , APP_NAME + ".ax") >= 0 {
			continue
		}

		if flag == "-h" || flag == "--help" || flag == "-?" || flag == "/?" {
			s_show_help = true
			break
		}

		if flag == "-V" || flag == "--version" {
			s_show_version = true
			break
		}

		if flag == "--hsp" {
			if i >= argc {
				ok = false
				reason = "Missing value of --hsp"
				break
			}
			s_hsp3_root = args(i)
			i++
			continue
		}

		if flag == "--cwd" {
			if i >= argc {
				ok = false
				reason = "Missing value of --cwd"
				break
			}
			s_work_dir = args(i)
			i++
			continue
		}

		if flag == "--ref-name" {
			if i >= argc {
				ok = false
				reason = "Missing value of --ref-name"
				break
			}
			s_ref_name = args(i)
			s_ref_name_exists = true
			i++
			continue
		}

		if flag == "--obj-name" {
			if i >= argc {
				ok = false
				reason = "Missing value of --obj-name"
				break
			}
			s_obj_name = args(i)
			i++
			continue
		}

		if flag == "--no-utf8-input" {
			if s_pp_opt & 32 {
				s_pp_opt -= 32
			}
			continue
		}

		if flag == "--no-utf8-output" {
			if s_compile_opts & 4 {
				s_compile_opts -= 4
			}
			i++
			i++
			continue
		}

		if s_subcommand_exists == false {
			s_subcommand = flag
			s_subcommand_exists = true
			continue
		}

		if s_src_name_exists == false {
			s_src_name = flag
			s_src_name_exists = true
			continue
		}

		ok = false
		reason = "Unknown positional argument " + flag
		break
	loop

	if argc == 0 || s_show_help || (s_subcommand_exists && s_subcommand == "help") {
		s_show_help = true
		s_subcommand = "help"
		s_subcommand_exists = true
	}

	if s_show_version || (s_subcommand_exists && s_subcommand == "version") {
		s_show_version = true
		s_subcommand = "version"
		s_subcommand_exists = true
	}

	if ok && s_subcommand_exists == false {
		ok = false
		reason = "Missing subcommand in cmdline"
	}

	if ok && s_show_help == false && s_show_version == false && s_src_name_exists == false {
		ok = false
		reason = "Missing script file in cmdline"
	}

	if ok == false {
		s_error = "ERROR: " + reason + "\ncmdline = '" + dir_cmdline + "'"
		return false
	}

	return true

#deffunc app_build

	if s_show_help {
		mes "See builder.md"
		return true
	}

	if s_show_version {
		s_error = APP_VERSION
		mes s_error
		s_exit_code = 0 ; Successful
		return true
	}

	chdir s_work_dir

	hsc_ini s_src_name
	if stat {
		hsc_getmes s_error
		return false
	}

	hsc_objname s_obj_name
	if stat {
		hsc_getmes s_error
		return false
	}

	if s_ref_name_exists {
		hsc_refname s_ref_name
		if stat {
			hsc_getmes s_error
			return false
		}
	}

	hsc_compath s_hsp3_root + "\\common\\"
	if stat {
		hsc_getmes s_error
		return false
	}

	hsc_comp s_compile_opts, s_pp_opt, s_debug_mode
	if stat {
		hsc_getmes s_error
		return false
	}

	hsc3_getruntime s_runtime_name, s_obj_name
	if s_runtime_name == "" {
		s_runtime_name = "hsp3.exe"
	}

	switch s_subcommand
	case "compile":
		hsc_getmes s_error
		s_error += "\n#Use runtime \"" + s_runtime_name + "\"\n"

		mes s_error
		swbreak

	case "make":
		if s_runtime_name == "hsp3.exe" {
			s_runtime_dir = s_hsp3_root + "\\"
		} else {
			s_runtime_dir = s_hsp3_root + "\\runtime\\"
		}

		hsc3_make s_runtime_dir
		if stat {
			hsc_getmes s_error
			return false
		}
		swbreak

	default:
		s_error = "ERROR: Unknown subcommand " + s_subcommand
		return false
	swend

	s_exit_code = 0 ; Successful
	return true

#deffunc app_fail

	mes "ERROR: " + s_error
	end 1 ; Failure

*l_on_exit

	end s_exit_code

#global

; ------------------------------------------------
; Entrypoint
; ------------------------------------------------

	app_main
